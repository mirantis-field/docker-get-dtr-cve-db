#!/bin/bash

# abort on error
set -e

# set defaults
CLOBBER_FILE="${CLOBBER_FILE:-false}"
DATABASE_OUTPUT="${DATABASE_OUTPUT:-/data}"
DATABASE_SCHEMA="${DATABASE_SCHEMA:-3}"
DEBUG="${DEBUG:-false}"
VERSION_ONLY="${VERSION_ONLY:-false}"

# check to see if show debug info
if [ "${DEBUG}" = true ] || [ "${DEBUG}" = "1" ]
then
  set -x
fi

TIMESTAMP="$(echo "${GEN_TOKEN_OUTPUT}" | jq -r '.["X-DOCKER-TIMESTAMP"]' 2>/dev/null || echo "no-timestamp")"

# get a download URL for the CVE database
DB_URL="$(curl -s -X GET \
  -H "X-DOCKER-KEY-ID: ${KEY}" \
  -H "X-DOCKER-TOKEN: ${TOKEN}" \
  -H "X-DOCKER-TIMESTAMP: ${TIMESTAMP}" \
  "https://license.mirantis.com/v1/dss/cve-db-updates/0?schema=${DATABASE_SCHEMA}" \
  | jq -r .urls[])"

# figure out what the file name should be
DATABASE_OUTPUT_FILE="$(echo "${DB_URL}" | awk -F '?' '{print $1}' | awk -F '/' '{print $NF}')"

# make sure the database file begins with `rollup`
if [ "$(echo "${DATABASE_OUTPUT_FILE}" | awk -F '-' '{print $1}')" != "rollup" ] && [ "$(echo "${DATABASE_OUTPUT_FILE}" | awk -F '_' '{print $1}')" != "rollup" ]
then
  echo "Error: DATABASE_OUTPUT_FILE (${DATABASE_OUTPUT_FILE}) wasn't what we expected; please file an issue at https://github.com/mirantis-field/docker-get-dtr-cve-db/issues"
  exit 1
fi

# make sure the database file ends with `tar`
if [ "$(echo "${DATABASE_OUTPUT_FILE}" | awk -F '.' '{print $NF}')" != "tar" ]
then
  echo "Error: DATABASE_OUTPUT_FILE (${DATABASE_OUTPUT_FILE}) wasn't what we expected; please file an issue at https://github.com/mirantis-field/docker-get-dtr-cve-db/issues"
  exit 1
fi

# check to see if VERSION_ONLY or CVE_DB_URL_ONLY are set
if [ "${VERSION_ONLY}" = "true" ] || [ "${CVE_DB_URL_ONLY}" = "true" ]
then
  # check to see if VERSION_ONLY is set
  if [ "${VERSION_ONLY}" = "true" ]
  then
    # output the version only
    echo "${DATABASE_OUTPUT_FILE}" | awk -F '.' '{print $1}' | awk -F '_' '{print $2}'
  fi

  # check to see if CVE_DB_URL_ONLY is set
  if [ "${CVE_DB_URL_ONLY}" = "true" ]
  then
    # output the CVE database URL only
    echo "${DB_URL}"
  fi
else
  # download the CVE DB
  # verify output directory exists
  if [ ! -d "${DATABASE_OUTPUT}" ]
  then
    echo "Error: ${DATABASE_OUTPUT} is not bind mounted."
    exit 1
  fi

  # make sure there isn't a file that exists here
  if [ -f "${DATABASE_OUTPUT}/${DATABASE_OUTPUT_FILE}" ] && [ "${CLOBBER_FILE}" = "false" ]
  then
    echo "Error: File ${DATABASE_OUTPUT}/${DATABASE_OUTPUT_FILE} already exists; remove the file and re-run this script or use CLOBBER_FILE"
    exit 1
  fi

  # download the latest CVE database
  echo "Downloading latest CVE database to '${DATABASE_OUTPUT}/${DATABASE_OUTPUT_FILE}'..."
  curl --progress-bar "${DB_URL}" -o "${DATABASE_OUTPUT}/${DATABASE_OUTPUT_FILE}"
  echo -e "done.\\n"
fi

